apiVersion: v1
kind: Template
metadata:
  name: community-gateway
labels:
  template: community-gateway
objects:
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: community-gateway-config
  data:
    # envoy requires the file extension `yaml` (and not `yml`).
    config.yaml: |
      # The administration endpoint uses a Unix socket instead of TCP in order
      # to avoid exposing it outside of the pod. Requests for metrics and
      # probes will go via an HTTP listener that only accepts requests for the
      # /metrics and /ready paths.
      admin:
        access_log_path: /dev/null
        address:
          pipe:
            path: /sockets/admin.socket

      static_resources:

        ### Clusters ###
        clusters:
        # This backend is used to send metrics and probe requests to the admin endpoint.
        - name: admin
          connect_timeout: 1s
          type: STATIC
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: admin
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    pipe:
                      path: /sockets/admin.socket

        - name: ext_fedora_auth
          connect_timeout: 2s
          type: STRICT_DNS
          load_assignment:
            cluster_name: ext_fedora_auth
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: localhost
                      port_value: 5556

        - name: image-builder
          connect_timeout: 2s
          type: STRICT_DNS
          load_assignment:
            cluster_name: image-builder
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: image-builder-community-service.image-builder-community-stage.svc.cluster.local
                      port_value: 8000

        ### Listeners ###
        listeners:
        # The admin listener isn't exposed, and is used only by the service monitor to scrape metrics.
        - name: admin
          address:
            socket_address:
              address: 0.0.0.0
              port_value: 9000
          filter_chains:
          - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: admin
                route_config:
                  name: admin
                  virtual_hosts:
                  - name: admin
                    domains:
                    - "*"
                    routes:
                    - name: ready
                      match:
                        path: /ready
                      route:
                        cluster: admin
                    - name: metrics
                      match:
                        path: /metrics
                      route:
                        cluster: admin
                        prefix_rewrite: /stats/prometheus
                http_filters:
                - name: envoy.filters.http.router
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

        - name: ingress
          address:
            socket_address:
              address: 0.0.0.0
              port_value: 10000
          filter_chains:
            filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                access_log:
                - name: envoy.access_loggers.file
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                    path: /dev/stdout
                stat_prefix: ingress
                route_config:
                  name: ingress
                  virtual_hosts:
                  - name: api
                    request_headers_to_remove:
                    - x-rh-identity
                    response_headers_to_remove:
                    - x-rh-identity
                    internal_only_headers:
                    - x-fedora-identity
                    domains:
                    - "*"
                    routes:
                    - match:
                        prefix: /api/image-builder
                      route:
                        cluster: image-builder
                        auto_host_rewrite: true
                        timeout: 30s


                http_filters:
                - name: envoy.filters.http.ext_authz
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                    http_service:
                      server_uri:
                        uri: 127.0.0.1:5556
                        cluster: ext_fedora_auth
                        timeout: 2s
                      authorization_response:
                        allowed_upstream_headers:
                          patterns:
                          - exact: x-fedora-identity

                - name: envoy.filters.http.router
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router


- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      service: community-gateway
    name:  community-gateway

  spec:
    replicas: ${{REPLICAS}}
    selector:
      matchLabels:
        app: community-gateway
    strategy:
      # Update pod 1 at a time
      type: RollingUpdate
      rollingUpdate:
        # Create at most 0 extra pod over .spec.replicas
        maxSurge: 0
        # At all times there should be .spec.replicas - 1 available
        maxUnavailable: 1

    template:
      metadata:
        labels:
          app: community-gateway
      spec:
        serviceAccountName: community-gateway-sa
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: community-gateway
                topologyKey: kubernetes.io/hostname
        containers:
        - name: community-gateway
          image: "${ENVOYPROXY_IMAGE_NAME}:${ENVOYPROXY_IMAGE_TAG}"
          command:
          - /usr/bin/envoy
          - --config-path
          - /configs/envoy/config.yaml
          ports:
          - name: metrics
            protocol: TCP
            containerPort: 9000
          - name: ingress
            protocol: TCP
            containerPort: 10000
          livenessProbe:
            httpGet:
              path: /ready
              port: 9000
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10
            timeoutSeconds: 1
          readinessProbe:
            httpGet:
              path: /ready
              port: 9000
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10
            timeoutSeconds: 1
          resources:
            requests:
              cpu: "${CPU_REQUEST}"
              memory: "${MEMORY_REQUEST}"
            limits:
              cpu: "${CPU_LIMIT}"
              memory: "${MEMORY_LIMIT}"
          volumeMounts:
          - name: envoy
            mountPath: /configs/envoy
          - name: sockets
            mountPath: /sockets
        - name: oidc-authorizer
          image: "${OIDC_AUTHORIZER_IMAGE_NAME}:${IMAGE_TAG}"
          command:
          - /oidc-authorizer
          ports:
          - name: auth
            protocol: TCP
            containerPort: 5556
          livenessProbe:
            httpGet:
              path: /ready
              port: 5556
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10
            timeoutSeconds: 1
          readinessProbe:
            httpGet:
              path: /ready
              port: 5556
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10
            timeoutSeconds: 1
          env:
          - name: PROVIDER
            value: ${OIDC_PROVIDER}
          resources:
            requests:
              cpu: "${AUTHORIZER_CPU_REQUEST}"
              memory: "${AUTHORIZER_MEMORY_REQUEST}"
            limits:
              cpu: "${AUTHORIZER_CPU_LIMIT}"
              memory: "${AUTHORIZER_MEMORY_LIMIT}"
        volumes:
        # - name: tls
        #   secret:
        #     secretName: tls
        - name: envoy
          configMap:
            name: community-gateway-config
        - name: sockets
          emptyDir:
            medium: Memory

- kind: ServiceAccount
  apiVersion: v1
  metadata:
    name: community-gateway-sa
    labels:
      app: community-gateway

- kind: Service
  apiVersion: v1
  metadata:
    name: community-gateway-metrics
    labels:
      app: community-gateway
      port: metrics
  spec:
    selector:
      app: community-gateway
    ports:
      - port: 9000
        targetPort: 9000
        name: metrics

- kind: Service
  apiVersion: v1
  metadata:
    name: community-gateway-ingress
    labels:
      app: community-gateway
      port: ingress
  spec:
    selector:
      app: community-gateway
    ports:
      - port: 10000
        targetPort: 10000
        protocol: TCP

parameters:
- description: oidc authorizer image name
  name: OIDC_AUTHORIZER_IMAGE_NAME
  value: quay.io/cloudservices/oidc-authorizer
  required: true
- description: oidc authorizer tag, will be set by the deployment pipeline
  name: IMAGE_TAG
  required: true
- description: envoy proxy image name
  name: ENVOYPROXY_IMAGE_NAME
  value: quay.io/app-sre/envoyproxy
  required: true
- description: envoy proxy tag
  name: ENVOYPROXY_IMAGE_TAG
  value: "v1.28.0"
- description: number of pods to spin up, minimum 3
  name: REPLICAS
  value: "3"
  required: true
- name: CPU_REQUEST
  description: CPU request per container
  value: "200m"
- name: CPU_LIMIT
  description: CPU limit per container
  value: "1"
- name: MEMORY_REQUEST
  description: Memory request per container
  value: "128Mi"
- name: MEMORY_LIMIT
  description: Memory limit per container
  value: "512Mi"
- name: AUTHORIZER_CPU_REQUEST
  description: CPU request per container
  value: "100m"
- name: AUTHORIZER_CPU_LIMIT
  description: CPU limit per container
  value: "200m"
- name: AUTHORIZER_MEMORY_REQUEST
  description: Memory request per container
  value: "64Mi"
- name: AUTHORIZER_MEMORY_LIMIT
  description: Memory limit per container
  value: "128Mi"
- name: OIDC_PROVIDER
  description: Openid connect provider (issuer)
  value: "https://id.stg.fedoraproject.org/openidc/"
